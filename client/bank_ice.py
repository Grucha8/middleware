# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.2
#
# <auto-generated>
#
# Generated from file `bank.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Bank
_M_Bank = Ice.openModule('Bank')
__name__ = 'Bank'

if 'NoSuchCurrencyError' not in _M_Bank.__dict__:
    _M_Bank.NoSuchCurrencyError = Ice.createTempClass()
    class NoSuchCurrencyError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::NoSuchCurrencyError'

    _M_Bank._t_NoSuchCurrencyError = IcePy.defineException('::Bank::NoSuchCurrencyError', NoSuchCurrencyError, (), False, None, ())
    NoSuchCurrencyError._ice_type = _M_Bank._t_NoSuchCurrencyError

    _M_Bank.NoSuchCurrencyError = NoSuchCurrencyError
    del NoSuchCurrencyError

if 'NegativeMoneyError' not in _M_Bank.__dict__:
    _M_Bank.NegativeMoneyError = Ice.createTempClass()
    class NegativeMoneyError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::NegativeMoneyError'

    _M_Bank._t_NegativeMoneyError = IcePy.defineException('::Bank::NegativeMoneyError', NegativeMoneyError, (), False, None, ())
    NegativeMoneyError._ice_type = _M_Bank._t_NegativeMoneyError

    _M_Bank.NegativeMoneyError = NegativeMoneyError
    del NegativeMoneyError

if 'WrongPeselError' not in _M_Bank.__dict__:
    _M_Bank.WrongPeselError = Ice.createTempClass()
    class WrongPeselError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::WrongPeselError'

    _M_Bank._t_WrongPeselError = IcePy.defineException('::Bank::WrongPeselError', WrongPeselError, (), False, None, ())
    WrongPeselError._ice_type = _M_Bank._t_WrongPeselError

    _M_Bank.WrongPeselError = WrongPeselError
    del WrongPeselError

if 'AccountAlreadyExists' not in _M_Bank.__dict__:
    _M_Bank.AccountAlreadyExists = Ice.createTempClass()
    class AccountAlreadyExists(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::AccountAlreadyExists'

    _M_Bank._t_AccountAlreadyExists = IcePy.defineException('::Bank::AccountAlreadyExists', AccountAlreadyExists, (), False, None, ())
    AccountAlreadyExists._ice_type = _M_Bank._t_AccountAlreadyExists

    _M_Bank.AccountAlreadyExists = AccountAlreadyExists
    del AccountAlreadyExists

if 'WrongPasswordError' not in _M_Bank.__dict__:
    _M_Bank.WrongPasswordError = Ice.createTempClass()
    class WrongPasswordError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::WrongPasswordError'

    _M_Bank._t_WrongPasswordError = IcePy.defineException('::Bank::WrongPasswordError', WrongPasswordError, (), False, None, ())
    WrongPasswordError._ice_type = _M_Bank._t_WrongPasswordError

    _M_Bank.WrongPasswordError = WrongPasswordError
    del WrongPasswordError

if 'NoPasswordError' not in _M_Bank.__dict__:
    _M_Bank.NoPasswordError = Ice.createTempClass()
    class NoPasswordError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Bank::NoPasswordError'

    _M_Bank._t_NoPasswordError = IcePy.defineException('::Bank::NoPasswordError', NoPasswordError, (), False, None, ())
    NoPasswordError._ice_type = _M_Bank._t_NoPasswordError

    _M_Bank.NoPasswordError = NoPasswordError
    del NoPasswordError

if 'ClientInformation' not in _M_Bank.__dict__:
    _M_Bank.ClientInformation = Ice.createTempClass()
    class ClientInformation(object):
        def __init__(self, firstName='', lastName='', pesel='', monthlyIncome=0):
            self.firstName = firstName
            self.lastName = lastName
            self.pesel = pesel
            self.monthlyIncome = monthlyIncome

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.firstName)
            _h = 5 * _h + Ice.getHash(self.lastName)
            _h = 5 * _h + Ice.getHash(self.pesel)
            _h = 5 * _h + Ice.getHash(self.monthlyIncome)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Bank.ClientInformation):
                return NotImplemented
            else:
                if self.firstName is None or other.firstName is None:
                    if self.firstName != other.firstName:
                        return (-1 if self.firstName is None else 1)
                else:
                    if self.firstName < other.firstName:
                        return -1
                    elif self.firstName > other.firstName:
                        return 1
                if self.lastName is None or other.lastName is None:
                    if self.lastName != other.lastName:
                        return (-1 if self.lastName is None else 1)
                else:
                    if self.lastName < other.lastName:
                        return -1
                    elif self.lastName > other.lastName:
                        return 1
                if self.pesel is None or other.pesel is None:
                    if self.pesel != other.pesel:
                        return (-1 if self.pesel is None else 1)
                else:
                    if self.pesel < other.pesel:
                        return -1
                    elif self.pesel > other.pesel:
                        return 1
                if self.monthlyIncome is None or other.monthlyIncome is None:
                    if self.monthlyIncome != other.monthlyIncome:
                        return (-1 if self.monthlyIncome is None else 1)
                else:
                    if self.monthlyIncome < other.monthlyIncome:
                        return -1
                    elif self.monthlyIncome > other.monthlyIncome:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_ClientInformation)

        __repr__ = __str__

    _M_Bank._t_ClientInformation = IcePy.defineStruct('::Bank::ClientInformation', ClientInformation, (), (
        ('firstName', (), IcePy._t_string),
        ('lastName', (), IcePy._t_string),
        ('pesel', (), IcePy._t_string),
        ('monthlyIncome', (), IcePy._t_long)
    ))

    _M_Bank.ClientInformation = ClientInformation
    del ClientInformation

if 'CreditReturn' not in _M_Bank.__dict__:
    _M_Bank.CreditReturn = Ice.createTempClass()
    class CreditReturn(object):
        def __init__(self, foreignCurrency=0.0, nativeCurrency=0.0):
            self.foreignCurrency = foreignCurrency
            self.nativeCurrency = nativeCurrency

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_Bank.CreditReturn):
                return NotImplemented
            else:
                if self.foreignCurrency != other.foreignCurrency:
                    return False
                if self.nativeCurrency != other.nativeCurrency:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_CreditReturn)

        __repr__ = __str__

    _M_Bank._t_CreditReturn = IcePy.defineStruct('::Bank::CreditReturn', CreditReturn, (), (
        ('foreignCurrency', (), IcePy._t_float),
        ('nativeCurrency', (), IcePy._t_float)
    ))

    _M_Bank.CreditReturn = CreditReturn
    del CreditReturn

_M_Bank._t_BankOperations = IcePy.defineValue('::Bank::BankOperations', Ice.Value, -1, (), False, True, None, ())

if 'BankOperationsPrx' not in _M_Bank.__dict__:
    _M_Bank.BankOperationsPrx = Ice.createTempClass()
    class BankOperationsPrx(Ice.ObjectPrx):

        def register(self, firstName, lastName, pesel, monthlyIncome, context=None):
            return _M_Bank.BankOperations._op_register.invoke(self, ((firstName, lastName, pesel, monthlyIncome), context))

        def registerAsync(self, firstName, lastName, pesel, monthlyIncome, context=None):
            return _M_Bank.BankOperations._op_register.invokeAsync(self, ((firstName, lastName, pesel, monthlyIncome), context))

        def begin_register(self, firstName, lastName, pesel, monthlyIncome, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.BankOperations._op_register.begin(self, ((firstName, lastName, pesel, monthlyIncome), _response, _ex, _sent, context))

        def end_register(self, _r):
            return _M_Bank.BankOperations._op_register.end(self, _r)

        def login(self, pesel, context=None):
            return _M_Bank.BankOperations._op_login.invoke(self, ((pesel, ), context))

        def loginAsync(self, pesel, context=None):
            return _M_Bank.BankOperations._op_login.invokeAsync(self, ((pesel, ), context))

        def begin_login(self, pesel, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.BankOperations._op_login.begin(self, ((pesel, ), _response, _ex, _sent, context))

        def end_login(self, _r):
            return _M_Bank.BankOperations._op_login.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Bank.BankOperationsPrx.ice_checkedCast(proxy, '::Bank::BankOperations', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Bank.BankOperationsPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Bank::BankOperations'
    _M_Bank._t_BankOperationsPrx = IcePy.defineProxy('::Bank::BankOperations', BankOperationsPrx)

    _M_Bank.BankOperationsPrx = BankOperationsPrx
    del BankOperationsPrx

    _M_Bank.BankOperations = Ice.createTempClass()
    class BankOperations(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Bank::BankOperations', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Bank::BankOperations'

        @staticmethod
        def ice_staticId():
            return '::Bank::BankOperations'

        def register(self, firstName, lastName, pesel, monthlyIncome, current=None):
            raise NotImplementedError("servant method 'register' not implemented")

        def login(self, pesel, current=None):
            raise NotImplementedError("servant method 'login' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_BankOperationsDisp)

        __repr__ = __str__

    _M_Bank._t_BankOperationsDisp = IcePy.defineClass('::Bank::BankOperations', BankOperations, (), None, ())
    BankOperations._ice_type = _M_Bank._t_BankOperationsDisp

    BankOperations._op_register = IcePy.Operation('register', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), IcePy._t_long, False, 0)), (), ((), IcePy._t_string, False, 0), (_M_Bank._t_WrongPeselError, _M_Bank._t_NegativeMoneyError))
    BankOperations._op_login = IcePy.Operation('login', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Bank._t_WrongPeselError, _M_Bank._t_NoPasswordError, _M_Bank._t_WrongPasswordError))

    _M_Bank.BankOperations = BankOperations
    del BankOperations

_M_Bank._t_StandardAccount = IcePy.defineValue('::Bank::StandardAccount', Ice.Value, -1, (), False, True, None, ())

if 'StandardAccountPrx' not in _M_Bank.__dict__:
    _M_Bank.StandardAccountPrx = Ice.createTempClass()
    class StandardAccountPrx(Ice.ObjectPrx):

        def getAccountBalance(self, context=None):
            return _M_Bank.StandardAccount._op_getAccountBalance.invoke(self, ((), context))

        def getAccountBalanceAsync(self, context=None):
            return _M_Bank.StandardAccount._op_getAccountBalance.invokeAsync(self, ((), context))

        def begin_getAccountBalance(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.StandardAccount._op_getAccountBalance.begin(self, ((), _response, _ex, _sent, context))

        def end_getAccountBalance(self, _r):
            return _M_Bank.StandardAccount._op_getAccountBalance.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Bank.StandardAccountPrx.ice_checkedCast(proxy, '::Bank::StandardAccount', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Bank.StandardAccountPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Bank::StandardAccount'
    _M_Bank._t_StandardAccountPrx = IcePy.defineProxy('::Bank::StandardAccount', StandardAccountPrx)

    _M_Bank.StandardAccountPrx = StandardAccountPrx
    del StandardAccountPrx

    _M_Bank.StandardAccount = Ice.createTempClass()
    class StandardAccount(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Bank::StandardAccount', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Bank::StandardAccount'

        @staticmethod
        def ice_staticId():
            return '::Bank::StandardAccount'

        def getAccountBalance(self, current=None):
            raise NotImplementedError("servant method 'getAccountBalance' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_StandardAccountDisp)

        __repr__ = __str__

    _M_Bank._t_StandardAccountDisp = IcePy.defineClass('::Bank::StandardAccount', StandardAccount, (), None, ())
    StandardAccount._ice_type = _M_Bank._t_StandardAccountDisp

    StandardAccount._op_getAccountBalance = IcePy.Operation('getAccountBalance', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), (_M_Bank._t_WrongPasswordError, _M_Bank._t_NoPasswordError))

    _M_Bank.StandardAccount = StandardAccount
    del StandardAccount

_M_Bank._t_PremiumAccount = IcePy.defineValue('::Bank::PremiumAccount', Ice.Value, -1, (), False, True, None, ())

if 'PremiumAccountPrx' not in _M_Bank.__dict__:
    _M_Bank.PremiumAccountPrx = Ice.createTempClass()
    class PremiumAccountPrx(_M_Bank.StandardAccountPrx):

        def tryToGetCredit(self, foreignCurrency, amount, timeToPayOff, context=None):
            return _M_Bank.PremiumAccount._op_tryToGetCredit.invoke(self, ((foreignCurrency, amount, timeToPayOff), context))

        def tryToGetCreditAsync(self, foreignCurrency, amount, timeToPayOff, context=None):
            return _M_Bank.PremiumAccount._op_tryToGetCredit.invokeAsync(self, ((foreignCurrency, amount, timeToPayOff), context))

        def begin_tryToGetCredit(self, foreignCurrency, amount, timeToPayOff, _response=None, _ex=None, _sent=None, context=None):
            return _M_Bank.PremiumAccount._op_tryToGetCredit.begin(self, ((foreignCurrency, amount, timeToPayOff), _response, _ex, _sent, context))

        def end_tryToGetCredit(self, _r):
            return _M_Bank.PremiumAccount._op_tryToGetCredit.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Bank.PremiumAccountPrx.ice_checkedCast(proxy, '::Bank::PremiumAccount', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Bank.PremiumAccountPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Bank::PremiumAccount'
    _M_Bank._t_PremiumAccountPrx = IcePy.defineProxy('::Bank::PremiumAccount', PremiumAccountPrx)

    _M_Bank.PremiumAccountPrx = PremiumAccountPrx
    del PremiumAccountPrx

    _M_Bank.PremiumAccount = Ice.createTempClass()
    class PremiumAccount(_M_Bank.StandardAccount):

        def ice_ids(self, current=None):
            return ('::Bank::PremiumAccount', '::Bank::StandardAccount', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Bank::PremiumAccount'

        @staticmethod
        def ice_staticId():
            return '::Bank::PremiumAccount'

        def tryToGetCredit(self, foreignCurrency, amount, timeToPayOff, current=None):
            raise NotImplementedError("servant method 'tryToGetCredit' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Bank._t_PremiumAccountDisp)

        __repr__ = __str__

    _M_Bank._t_PremiumAccountDisp = IcePy.defineClass('::Bank::PremiumAccount', PremiumAccount, (), None, (_M_Bank._t_StandardAccountDisp,))
    PremiumAccount._ice_type = _M_Bank._t_PremiumAccountDisp

    PremiumAccount._op_tryToGetCredit = IcePy.Operation('tryToGetCredit', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_float, False, 0), ((), IcePy._t_long, False, 0)), (), ((), _M_Bank._t_CreditReturn, False, 0), (_M_Bank._t_NoSuchCurrencyError, _M_Bank._t_NegativeMoneyError, _M_Bank._t_WrongPasswordError, _M_Bank._t_NoPasswordError))

    _M_Bank.PremiumAccount = PremiumAccount
    del PremiumAccount

# End of module Bank
